#!/usr/bin/env python

# icsy! - I Can't Sleep Yet!
# by jwc < http://jwcxz.com >

import getopt, random, signal, subprocess, sys, threading, time

class IcsyQuestion:
	numcorrect = 0;

	operations = [ '+', '-' ];
	min = 1
	max = 100

	def __init__(self, number):
		self.number = number
		for i in xrange(number):
			self.ask();

	def ask(self):
		# it would be cool to replace this with something that asks different
		# types of questions

		a = random.randrange(self.min, self.max);
		b = random.randrange(self.min, self.max);
		o = random.randrange(len(self.operations));

		if o == 0:
			answer = a + b
		elif o == 1:
			answer = a - b

		guess = raw_input("what is " + str(a) + self.operations[o] + str(b) + "? ");
		if str(guess) == str(answer): self.numcorrect += 1

	def result(self):
		if self.numcorrect == self.number:
			print ":) everything was correct";
			return True;
		else:
			print str(self.numcorrect) + '/' + str(self.number) + ' correct... try again';
			return False;

class IcsyAlarm( threading.Thread ):
	en = True

	def __init__(self, command, duration):
		threading.Thread.__init__(self);
		self.command = command
		self.duration = duration;

	def run(self):
		# sleep for a while and then sound the alarm
		time.sleep(self.duration);
		if self.en: self.alarm = subprocess.Popen(self.command, shell=True);
	
	def stop(self):
		try:
			self.alarm.terminate();
		except AttributeError:
			self.en = False;

class Icsy:
	ICSYVSN = "0.9";

	def __init__(self):
		try:
			opts, args = getopt.getopt(sys.argv[1:], 'hvt:s:n:a:c:', ['help', 'version', 'time=', 'snooze=', 'number=', 'alarm=', 'command=']);
		except getopt.GetoptError , e:
			self.__err("> Grr... " + str(e));
			self.__usage();
			sys.exit(2);

		# set defaults
		self.cdtime = self.__mktime('30m');
		self.snooze = self.__mktime('5m');
		self.number = 3;
		self.almcmd = 'mplayer -noconsolecontrols -nolirc -really-quiet -loop 0';
		self.alarmf = '~/.icsy.mp3';

		# parse arguments
		override = False;
		for o,a in opts:
			if o in [ '-h' , '--help' ]:
				self.__usage();
				sys.exit();
			elif o in [ '-v' , '--version' ]:
				self.__version();
				sys.exit();
			elif o in [ '-t' , '--time' ]:     self.cdtime = self.__mktime(a);
			elif o in [ '-s' , '--snooze' ]:   self.snooze = self.__mktime(a);
			elif o in [ '-n' , '--number' ]:   self.number = int(a);
			elif o in [ '-a' , '--alarm' ]:	   self.alarmf = a;
			elif o in [ '-c' , '--command' ]:
				override = True;
				self.almcmd = a;

		if not override: self.almcmd += ' ' + self.alarmf

		# start main loop
		self.setalarm();
	
	def setalarm(self):
		print "setting alarm for", int(self.cdtime), "seconds"
		self.alarm = IcsyAlarm(self.almcmd, self.cdtime);
		self.alarm.start();
		self.alarm.join();

		# after waiting for the thread to finish, begin the disarm sequence
		self.disarm();

	def setsnooze(self):
		# set snooze alarm
		print "starting snooze timer for", int(self.snooze), "seconds";
		self.alarm = IcsyAlarm(self.almcmd, self.snooze);
		self.alarm.start();

	def disarm(self):
		# ask user to begin
		a = raw_input("press enter when awake ");
		self.alarm.stop();

		self.setsnooze();
		print "are you __really__ awake?"

		# replace this whole thing with a question class
		success = False;
		while not success:
			q = IcsyQuestion(self.number);
			success = q.result();

		self.alarm.stop();
		print "now get back to work!";
		sys.exit(0);

	def __mktime(self,t):
		# TODO : make this smarter later
		#        e.g. support 13m15s
		if t[-1:].isdigit(): return float(t);				# already in seconds
		else:
			if   t[-1:] == 's': return float(t[:-1]);		# already in seconds
			elif t[-1:] == 'm': return float(t[:-1])*60;	# minutes
			elif t[-1:] == 'h': return float(t[:-1])*3600;	# hours

	def __usage(self):
		print "usage: icsy [options]";
		print "  option          description     default";
		print "  -t | --time     countdown time  30m";
		print "  -s | --snooze   snooze time     5m";
		print "  -n | --number   # of questions  3";
		print "  -a | --alarm    alarm file      ~/.icsy.mp3";
		print "  -c | --command  alarm command   'mplayer -noconsolecontrols -nolirc -really-quiet -loop 0 [alarm file]'";
		print "  -h | --help     -> prints this usage statement";
		print "  -v | --version  -> prints version information";
		print ". units of time are by default seconds, but can be m (minutes) or h (hours)";
		print ". -c completely overrides -a";

	def __version(self):
		print "icsy! - I can't sleep yet!"
		print "  version: " + self.ICSYVSN;
		print "  by     : jwc < http://jwcxz.com >";

	def __err(self, msg, code=1):
		print msg;
		if code != 0: sys.exit(code);


if __name__ == "__main__":
	# disable keyboard interrupts (from http://www.siafoo.net/snippet/84)
	signal.signal(signal.SIGINT,signal.SIG_IGN)

	# let's go!
	icsy = Icsy();

# vim: ts=4 sw=4
